package desavx

import (
	"bytes"
	"crypto/cipher"
	"testing"
)

type (
	cryptTests struct {
		key     []byte
		in, out []byte
	}
)

func testCryptBlocks(
	modeFactory func([]byte) cipher.BlockMode,
	tests cryptTests,
) func(*testing.T) {
	return func(t *testing.T) {
		out := make([]byte, len(tests.out))
		modeFactory(tests.key).CryptBlocks(out, tests.in)

		if !bytes.Equal(out[:], tests.out[:]) {
			t.FailNow()
		}
	}
}

var (
	testExample = cryptTests{
		key: []byte{
			0xf1, 0xdf, 0xbc, 0x9b, 0x79, 0x57, 0x34, 0x13},
		in: []byte{
			0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01,
			0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01,
			0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01,
		},
		out: []byte{
			0x05, 0xb4, 0x0a, 0x0f, 0x54, 0x13, 0xe8, 0x85,
			0x05, 0xb4, 0x0a, 0x0f, 0x54, 0x13, 0xe8, 0x85,
			0x05, 0xb4, 0x0a, 0x0f, 0x54, 0x13, 0xe8, 0x85,
		},
	}

	// NIST Special Publication 800-17 Appendix A
	// Sample outputs
	testsSample = cryptTests{
		key: []byte{
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		},
		in: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
		},
		out: []byte{
			0x00, 0xd9, 0x31, 0xdd, 0xe5, 0xa5, 0xf8, 0x95,
			0x00, 0xd9, 0x31, 0xdd, 0xe5, 0xa5, 0xf8, 0x95,
			0x00, 0xd9, 0x31, 0xdd, 0xe5, 0xa5, 0xf8, 0x95,
			0x00, 0xd9, 0x31, 0xdd, 0xe5, 0xa5, 0xf8, 0x95,
		},
	}

	// NIST Special Publication 800-17 Appendix B
	// Known answer tests table 1
	testsTable1 = cryptTests{
		key: []byte{
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
		in: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,

			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,

			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

			0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		out: []byte{
			0x00, 0xD9, 0x31, 0xDD, 0xE5, 0xA5, 0xF8, 0x95,
			0x19, 0x56, 0x01, 0xA5, 0x1C, 0x12, 0x7F, 0xDD,
			0xEA, 0x34, 0x38, 0x4F, 0x10, 0x53, 0x86, 0x2E,
			0x4F, 0x1D, 0xD8, 0x6C, 0xFF, 0x88, 0xD3, 0x4B,
			0x56, 0x14, 0xFB, 0xB2, 0x67, 0xE7, 0xB9, 0x20,
			0xEF, 0x38, 0x71, 0xD7, 0x80, 0x93, 0x57, 0x55,
			0x2F, 0x51, 0x04, 0xAF, 0xFA, 0xDE, 0xC5, 0x6C,
			0x60, 0x72, 0xD8, 0xA5, 0x9B, 0x27, 0x9F, 0x0D,
			0x0A, 0x5A, 0xBD, 0x71, 0x02, 0x1B, 0x03, 0xD9,
			0x51, 0xD9, 0x3D, 0x7C, 0xB3, 0x50, 0x42, 0x42,
			0xE5, 0x21, 0x9A, 0xCD, 0x7E, 0x1B, 0x06, 0xB8,
			0x28, 0xBD, 0x65, 0x6B, 0x28, 0x0F, 0x5D, 0xF1,
			0xA1, 0xEB, 0x5D, 0x6E, 0x8D, 0xCC, 0xD0, 0xAD,
			0xD1, 0x63, 0xAD, 0x52, 0x27, 0xF8, 0xD5, 0xE6,

			0x5E, 0x1A, 0x59, 0x3F, 0xBD, 0xE3, 0xBF, 0xEC,
			0xCD, 0x65, 0xD1, 0x79, 0x43, 0x83, 0x56, 0xF3,
			0xA9, 0x7F, 0x03, 0x20, 0x2F, 0x98, 0x9F, 0x2B,
			0xE6, 0x0B, 0x6F, 0xA1, 0x68, 0xE0, 0x9D, 0x88,
			0x98, 0x12, 0x6A, 0x84, 0x5D, 0x27, 0x9E, 0xE1,
			0xEC, 0x1A, 0xD7, 0x23, 0xD5, 0x8E, 0x9A, 0x32,
			0x97, 0x3C, 0xD2, 0x57, 0x25, 0xE2, 0xFC, 0xE7,
			0x5D, 0xD6, 0xF2, 0x7F, 0x81, 0xF5, 0xA9, 0x12,
			0x19, 0x9C, 0xDC, 0x38, 0xAD, 0xC3, 0x84, 0xA4,
			0x72, 0xAD, 0xF8, 0x1E, 0x8A, 0x0A, 0xE0, 0xFB,
			0x63, 0x13, 0x52, 0x07, 0x94, 0x07, 0x0D, 0x75,
			0xAF, 0x2F, 0x4C, 0x72, 0x9C, 0xED, 0xFE, 0x64,
			0x60, 0x2B, 0x8E, 0x32, 0x3B, 0x26, 0x2B, 0xF0,
			0x52, 0xB8, 0x10, 0x9A, 0x5A, 0x55, 0x64, 0x9D,
			0xD7, 0x55, 0x52, 0xED, 0x0B, 0xFF, 0x06, 0xD1,
			0xA5, 0x64, 0x8C, 0x13, 0x6B, 0x2C, 0x65, 0xE1,
			0x46, 0x8F, 0xEC, 0x86, 0x11, 0x58, 0x28, 0xE4,
			0x36, 0x1A, 0x2D, 0xE2, 0xED, 0xF5, 0xB5, 0xAE,

			0x5C, 0x0C, 0xEC, 0x8A, 0x56, 0xD7, 0x43, 0xE9,
			0x4B, 0xB0, 0x54, 0x6F, 0x27, 0xC8, 0x98, 0xDF,
			0x6F, 0x69, 0x6C, 0x0F, 0x68, 0xE4, 0x60, 0xB1,
			0xB8, 0x4A, 0x9C, 0x7D, 0xB0, 0x52, 0x07, 0xFA,
			0x02, 0x85, 0xBC, 0x6D, 0x03, 0x2B, 0x3A, 0xCA,
			0xCF, 0x9B, 0xB5, 0x7B, 0x51, 0x05, 0x09, 0x5E,
			0x26, 0x07, 0xD9, 0x91, 0x3B, 0xEB, 0x4E, 0x81,
			0x9F, 0x9C, 0x91, 0x32, 0x15, 0xDB, 0x49, 0x4D,
			0x21, 0x06, 0xCF, 0xF8, 0xC3, 0x5F, 0xEB, 0x25,
			0x6F, 0x1C, 0x0D, 0x62, 0xC0, 0x20, 0x6A, 0xAB,
			0xCA, 0x2C, 0xF9, 0x98, 0xBC, 0x0D, 0xE9, 0x79,
			0x0E, 0xBB, 0x72, 0x80, 0xDD, 0xCE, 0x6E, 0x86,
			0xA8, 0x64, 0x3E, 0x2F, 0x6F, 0x53, 0x54, 0x8B,
			0x6B, 0xB8, 0x95, 0x55, 0x97, 0xD3, 0x51, 0xEA,
			0x31, 0xDE, 0x42, 0x45, 0xAC, 0xC6, 0xFF, 0xCA,
			0x6C, 0x79, 0x90, 0xDF, 0x2D, 0x5A, 0xD4, 0x8D,
			0xD0, 0xC2, 0x0E, 0x88, 0x5E, 0xD5, 0x29, 0x10,
			0xA9, 0xBE, 0x9D, 0x63, 0x23, 0xCB, 0x86, 0x5D,

			0x5F, 0x0C, 0x7C, 0xAE, 0x53, 0xA8, 0x1C, 0x1D,
			0x28, 0x32, 0x8F, 0x24, 0x29, 0x23, 0x33, 0xCE,
			0x42, 0xB9, 0x4F, 0xE2, 0xAB, 0xD1, 0x05, 0x84,
			0x07, 0x42, 0xCA, 0x90, 0x80, 0xD7, 0x43, 0xE6,
			0x23, 0x8A, 0x74, 0x37, 0x99, 0x1B, 0x22, 0x48,
			0x54, 0xFD, 0xFA, 0x61, 0xBD, 0x0B, 0x7C, 0xDD,
			0xC4, 0xB5, 0x0D, 0x57, 0x1A, 0x29, 0xBC, 0x2F,
			0x12, 0x6E, 0xE2, 0xE4, 0xD7, 0x30, 0x7C, 0xE0,
			0xA1, 0x90, 0x8E, 0x8E, 0x25, 0xE2, 0x53, 0x09,
			0xEE, 0xF2, 0xEB, 0xCE, 0xC4, 0x1B, 0x71, 0x5B,
			0xF6, 0x85, 0x9E, 0x6D, 0x1E, 0x3F, 0x08, 0xCC,
			0xFE, 0x2D, 0x0D, 0xD5, 0x67, 0x88, 0xFD, 0xD2,
			0x8F, 0x70, 0x92, 0xCE, 0x22, 0xEA, 0xE7, 0x06,
			0xD6, 0x4B, 0xBA, 0x4A, 0xB4, 0x40, 0x6B, 0x16},
	}
)

func TestDESCryptBlocks(t *testing.T) {
	t.Run("example", testCryptBlocks(
		NewDESECBEncrypter, testExample))
	t.Run("sample outputs", testCryptBlocks(
		NewDESECBEncrypter, testsSample))
	t.Run("known answer tests table 1", testCryptBlocks(
		NewDESECBEncrypter, testsTable1))
}

func TestDES3CryptBlocks(t *testing.T) {
	t.Run("example", testCryptBlocks(
		NewDES3ECBEncrypter,
		cryptTests{
			key: append(testExample.key,
				append(testExample.key,
					testExample.key...)...),
			in:  testExample.in,
			out: testExample.out}))
	t.Run("sample outputs", testCryptBlocks(
		NewDES3ECBEncrypter,
		cryptTests{
			key: append(testsSample.key,
				append(testsSample.key,
					testsSample.key...)...),
			in:  testsSample.in,
			out: testsSample.out}))
	t.Run("known answer tests table 1", testCryptBlocks(
		NewDES3ECBEncrypter,
		cryptTests{
			key: append(testsTable1.key,
				append(testsTable1.key,
					testsTable1.key...)...),
			in:  testsTable1.in,
			out: testsTable1.out}))
}
